/*
   require(
            block.timestamp < _unlockTime,
            "Unlock time should be in the future"
        );
    uint public unlockTime;

    function withdraw() public {
        // Uncomment this line, and the import of "hardhat/console.sol", to print a log in your terminal
        // console.log("Unlock time is %o and block timestamp is %o", unlockTime, block.timestamp);

        require(block.timestamp >= unlockTime, "You can't withdraw yet");
        require(msg.sender == owner, "You aren't the owner");

        emit Withdrawal(address(this).balance, block.timestamp);

        owner.transfer(address(this).balance);
    }

    *********
     function splitStringBySpaces(
        string memory str
    ) public pure returns (string[] memory) {
        string[] memory words = new string[](bytes(str).length);
        uint256 i = 0;
        uint256 j = 0;
        // bytes memory substring = bytes(str).slice(5, 10);
        bytes memory bytesStr = bytes(str);
        while (j < bytes(str).length) {
            if (bytesStr[j]) == " ") {
                // str[j]
                words[i] = substring(str, i, j);
                i++;
                j++;
            } else {
                j++;
            }
        }

        // Add the last word to the array of strings.
        if (j > i) {
            words[i] = substring(str, i, j);
            i++;
        }

        // Return the array of strings.
        return words;
    }

    function substring(
        string memory str,
        uint startIndex,
        uint endIndex
    ) private returns (string storage) {
        bytes memory strBytes = bytes(str);
        bytes memory result = new bytes(endIndex - startIndex);
        for (uint i = startIndex; i < endIndex; i++) {
            result[i - startIndex] = strBytes[i];
        }
        return string(result);
    }

            // Trim the array to the actual number of matches
        assembly {
            mstore(matchingKeys, count)
        }
    */


    /*
    function searchField(address fieldValue) external view returns (uint256) {
        for (uint256 i = 0; i < nationalIDs.length; i++) {
            uint256 key = nationalIDs[i];
            Person memory person = people[key];
            if (person.person_wallet_address == fieldValue) {
                return person.NID;
            }
        }

        return 0;
    }
    */